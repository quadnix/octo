// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Resource Serialization Service UT deserialize() should deserialize a resource with complex properties 1`] = `
[
  {
    "context": "@octo/test-resource=resource-1",
    "parents": [],
    "properties": {
      "key1": {
        "key2": {
          "key3": "value3",
        },
        "key4": "value4",
      },
    },
    "resourceId": "resource-1",
    "response": {
      "response1": "value1",
    },
  },
]
`;

exports[`Resource Serialization Service UT deserialize() should deserialize a single resource 1`] = `
[
  {
    "context": "@octo/test-resource=resource-1",
    "parents": [],
    "properties": {
      "key1": "value1",
    },
    "resourceId": "resource-1",
    "response": {
      "response1": "value1",
    },
  },
]
`;

exports[`Resource Serialization Service UT deserialize() should deserialize a single shared resource 1`] = `
[
  "@octo/test-resource=resource-1",
  "@octo/test-resource=resource-2",
]
`;

exports[`Resource Serialization Service UT serialize() should not serialize deleted resources 1`] = `
{
  "dependencies": [],
  "resources": {
    "@octo/test-resource=resource-1": {
      "className": "@octo/TestResource",
      "resource": {
        "parents": [],
        "properties": {
          "key1": "value1",
        },
        "resourceId": "resource-1",
        "response": {
          "response1": "value1",
        },
      },
    },
  },
  "sharedResources": {},
}
`;

exports[`Resource Serialization Service UT serialize() should serialize an empty array 1`] = `
{
  "dependencies": [],
  "resources": {},
  "sharedResources": {},
}
`;

exports[`Resource Serialization Service UT serialize() should serialize dependencies and properties and resources 1`] = `
{
  "dependencies": [
    {
      "behaviors": [
        {
          "forAction": "delete",
          "onAction": "delete",
          "onField": "resourceId",
          "toField": "resourceId",
        },
      ],
      "from": "@octo/test-resource=resource-1",
      "relationship": {
        "onField": "resourceId",
        "toField": "resourceId",
        "type": "parent",
      },
      "to": "@octo/test-resource=resource-2",
    },
    {
      "behaviors": [
        {
          "forAction": "add",
          "onAction": "add",
          "onField": "resourceId",
          "toField": "resourceId",
        },
        {
          "forAction": "update",
          "onAction": "add",
          "onField": "resourceId",
          "toField": "resourceId",
        },
      ],
      "from": "@octo/test-resource=resource-2",
      "relationship": {
        "onField": "resourceId",
        "toField": "resourceId",
        "type": "child",
      },
      "to": "@octo/test-resource=resource-1",
    },
  ],
  "resources": {
    "@octo/test-resource=resource-1": {
      "className": "@octo/TestResource",
      "resource": {
        "parents": [],
        "properties": {
          "key1": "value1",
        },
        "resourceId": "resource-1",
        "response": {
          "response1": "value1",
        },
      },
    },
    "@octo/test-resource=resource-2": {
      "className": "@octo/TestResource",
      "resource": {
        "parents": [
          {
            "context": "@octo/test-resource=resource-1",
            "isMatchingResource": false,
          },
        ],
        "properties": {
          "key2": "value2",
        },
        "resourceId": "resource-2",
        "response": {
          "response2": "value2",
        },
      },
    },
  },
  "sharedResources": {},
}
`;

exports[`Resource Serialization Service UT serialize() should serialize non-empty array 1`] = `
{
  "dependencies": [],
  "resources": {
    "@octo/test-resource=resource-1": {
      "className": "@octo/TestResource",
      "resource": {
        "parents": [],
        "properties": {},
        "resourceId": "resource-1",
        "response": {},
      },
    },
  },
  "sharedResources": {},
}
`;

exports[`Resource Serialization Service UT serialize() should serialize shared resources 1`] = `
{
  "dependencies": [
    {
      "behaviors": [
        {
          "forAction": "delete",
          "onAction": "delete",
          "onField": "resourceId",
          "toField": "resourceId",
        },
      ],
      "from": "@octo/test-resource=resource-1",
      "relationship": {
        "onField": "resourceId",
        "toField": "resourceId",
        "type": "parent",
      },
      "to": "@octo/test-resource=resource-2",
    },
    {
      "behaviors": [
        {
          "forAction": "add",
          "onAction": "add",
          "onField": "resourceId",
          "toField": "resourceId",
        },
        {
          "forAction": "update",
          "onAction": "add",
          "onField": "resourceId",
          "toField": "resourceId",
        },
      ],
      "from": "@octo/test-resource=resource-2",
      "relationship": {
        "onField": "resourceId",
        "toField": "resourceId",
        "type": "child",
      },
      "to": "@octo/test-resource=resource-1",
    },
  ],
  "resources": {
    "@octo/test-resource=resource-1": {
      "className": "@octo/TestResource",
      "resource": {
        "parents": [],
        "properties": {
          "key1": "value1",
        },
        "resourceId": "resource-1",
        "response": {
          "response1": "value1",
        },
      },
    },
  },
  "sharedResources": {
    "@octo/test-resource=resource-2": {
      "className": "@octo/SharedTestResource",
      "resource": {
        "parents": [
          {
            "context": "@octo/test-resource=resource-1",
            "isMatchingResource": false,
          },
        ],
        "properties": {
          "key2": "value2",
        },
        "resourceId": "resource-2",
        "response": {
          "response2": "value2",
        },
      },
    },
  },
}
`;
